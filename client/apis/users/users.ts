/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Request Form App Service
 * request form app APIs
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type { UserSignInInput, UserSignInResponse } from '.././model';

import { customFetch } from '../../orval/custom-fetch';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary User Sign In
 */
export type postUserSignInResponse200 = {
  data: UserSignInResponse;
  status: 200;
};

export type postUserSignInResponse400 = {
  data: UserSignInResponse;
  status: 400;
};

export type postUserSignInResponse500 = {
  data: void;
  status: 500;
};

export type postUserSignInResponseSuccess = postUserSignInResponse200 & {
  headers: Headers;
};
export type postUserSignInResponseError = (
  | postUserSignInResponse400
  | postUserSignInResponse500
) & {
  headers: Headers;
};

export type postUserSignInResponse =
  | postUserSignInResponseSuccess
  | postUserSignInResponseError;

export const getPostUserSignInUrl = () => {
  return `/users/sign-in`;
};

export const postUserSignIn = async (
  userSignInInput: UserSignInInput,
  options?: RequestInit,
): Promise<postUserSignInResponse> => {
  return customFetch<postUserSignInResponse>(getPostUserSignInUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(userSignInInput),
  });
};

export const getPostUserSignInMutationOptions = <
  TError = UserSignInResponse | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUserSignIn>>,
    TError,
    { data: UserSignInInput },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUserSignIn>>,
  TError,
  { data: UserSignInInput },
  TContext
> => {
  const mutationKey = ['postUserSignIn'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUserSignIn>>,
    { data: UserSignInInput }
  > = (props) => {
    const { data } = props ?? {};

    return postUserSignIn(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUserSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUserSignIn>>
>;
export type PostUserSignInMutationBody = UserSignInInput;
export type PostUserSignInMutationError = UserSignInResponse | void;

/**
 * @summary User Sign In
 */
export const usePostUserSignIn = <
  TError = UserSignInResponse | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUserSignIn>>,
    TError,
    { data: UserSignInInput },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUserSignIn>>,
  TError,
  { data: UserSignInInput },
  TContext
> => {
  const mutationOptions = getPostUserSignInMutationOptions(options);

  return useMutation(mutationOptions);
};
